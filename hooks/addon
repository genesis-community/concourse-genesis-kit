#!/bin/bash
# shellcheck disable=2181
set -u

#Version check
min_version="2.7.6"
genesis_version="$(genesis -v 2>&1 | grep '^Genesis v' | sed -e 's/Genesis v\(.*\) (.*$/\1/')"
if ! [[ "$genesis_version" =~ -dev$ ]] && ! new_enough "$genesis_version" "$min_version" ; then
  describe >&2 "" "#R{[ERROR]} This kit needs Genesis $min_version.  Please upgrade before continuing" ""
  exit 1
fi
set -e

list() {
  describe "" "$(cat <<END_OF_LIST
The following addons are defined for #C{$GENESIS_KIT_ID} kit:

  #G{visit}                Open the Concourse Web User Interface in your browser
                       (requires macOS)

  #G{download-fly}         Get the version of fly compatible with this Concourse

  #G{login}                Login to this Concourse deployment with fly

  #G{logout}               Logout of this Concourse deployment with fly

  #G{fly}                  Run fly commands targetting this Concourse Deployment

  #G{setup-approle}        Create the necessary Vault AppRole and policy for Genesis
                       Concourse deployments.
END_OF_LIST
  )" ""
}

if [[ "$GENESIS_ADDON_SCRIPT" == "list" ]] ; then
  list
  exit 0
fi

error() {
  bail "" "$@" ""
}

get_host_param() {
  if ! param="$(echo "$exodus_data" | jq -r '."'"${1}"'"' 2>/dev/null)" ; then
    if [[ -n "$2" ]] ; then echo "$2"; return 0; fi
    if [[ "$GENESIS_ENVIRONMENT" != "$host_env" ]] ; then
      error \
        "#R{[ERROR]} Cannot find '$1' in exodus data for host concourse environment" \
        "        '#C{$host_env}' -- please redeploy it before using this addon."
    else
      error \
        "#R{[ERROR]} Cannot find '$1' in exodus data -- please redeploy this" \
        "        environment before using this addon."
    fi
  fi
  echo "$param"
  return 0
}

visit() {
  if ! command -v open >/dev/null 2>&1; then
    error "#R{[ERROR]} The 'visit' addon script only works on macOS, currently."
  fi
  host_user="$(get_host_param username)"
  host_pw="$(get_host_param password)"
  describe "" \
    "You will need to enter the following credentials once the page opens:" \
    "#I{  username:} #C{$host_user}" \
    "#I{  password:} #C{$host_pw}" \
    ""
  host="$(get_host_param external_url)"

  read -n 1 -s -r -p "Press any key to open the web console..."
  open "${host}/teams/main/login"
}

get_target() {
  url="$(get_host_param external_url)" || exit $?
  fly targets | grep "^${host_env} " || true
}

needs_fly() {
  if ! command -v fly > /dev/null ; then
    error "#R{[ERROR]} Cannot find '#C{fly}' command -- use download-fly addon to download it" \
          "        to somewhere in your path"
  fi
}

download_fly() {
  [[ -z "$GENESIS_CALLER_DIR" ]] && error "#R{[ERROR]} Calling scope not found -- internal Genesis error"
  cd "$GENESIS_CALLER_DIR"

  path=""
  platform=""
  sync=""
  url="$(get_host_param external_url)"
  while [[ $# -gt 0 ]]; do
    arg="$1"; shift
    case "$arg" in
      "-p") platform="$1"; shift ;;
      "--sync")
        [[ -n "$path" ]]             && error "#R{[ERROR]} Can't specify a path and use --sync option"
        path="$(command -v fly 2>/dev/null)"
        sync=1
        [[ $? -gt 0 || -z "$path" ]] && error "#R{[ERROR]} No fly found in path -- cannot use --sync option"
        [[ ! -w "$path" ]]           && error "#R{[ERROR]} No write permission to $path -- cannot use --sync option"
        ;;
      "-*")                             error "#R{[ERROR]} Invalid option $arg" ;;
      *)
        [[ -n "$sync" ]]             && error "#R{[ERROR]} Can't specify a path and use --sync option"
        [[ -n "$path" ]]             && error "#R{[ERROR]} Can't specify multiple paths"
        path="$arg"
        ;;
    esac
  done

  case "${platform:-$OSTYPE}" in
    darwin*|mac) platform='darwin' ;;
    linux*)      platform='linux' ;;
    cygwin|win*) platform='windows' ;;
    *)
      if [[ -n "$platform" ]] ; then
        error "#R{[ERROR]} Unknown platform type '$platform': expecting one of darwin, linux or windows"
      else
        error "#R{[ERROR]} Cannot determine platform type: please specify one of darwin, linux or" \
              "        windows using the -t option"
      fi
      ;;
  esac

  [[ -z "$path" ]] && path="."
  [[ -d "$path" ]] && path="$path/fly"

      echo ""
  describe "Downloading #C{$platform/amd64} version of fly from #C{${url}}..." ""
  STATUSCODE="$(curl -o "$path" -w "%{http_code}" -Lk "$url/api/v1/cli?arch=amd64&platform=$platform")"
  [[ $? -gt 0 || $STATUSCODE != '200' ]] && error "#R{[ERROR]} Failed to download fly (Status: $STATUSCODE):" "$(cat $path)"
  chmod a+x "$path"

  describe "" "#G{Download successful - written to} #C{$path}" ""
  exit 0
}

has_target() {
  needs_fly

  url="$(get_host_param external_url)" || exit $?
  target="$(get_target)" || exit $?
  [[ $? -gt 0 || -z "$target" ]] && return 1

  target_url="$( echo "$target" | awk '{print $2}')"
  if [[ "$url" != "$target_url" ]] ; then
    error "#R{[ERROR]} Target mismatch in URL from expected ($url) and current ($target_url)." \
          "        Cannot continue."
  fi
  return 0
}

is_logged_in() {
  needs_fly
  fly -t "$host_env" status >/dev/null 2>&1
  return $?
}

login() {
  needs_fly
  host_user="$(get_host_param username)"
  describe >&2 \
    "" \
    "Logging in to Concourse deployment #C{$host_env} as user '$host_user'." \
    ""
  host_pw="$(get_host_param password)"
  insecure=""
  [[ "$(get_host_param self-signed no)" == "1" ]] && insecure="-k"
  if has_target ; then
    fly -t "$host_env" login --username="$host_user" --password="$host_pw" $insecure
  else
    fly -t "$host_env" login --username="$host_user" --password="$host_pw" --concourse-url "$(get_host_param external_url)" $insecure 
  fi
  rc="$?"
  [[ $rc -gt 0 ]] && describe >&2 \
    "#R{[ERROR]} Failed to log in!"
  return $rc
}

safe_kv_mounts() {
  safe vault secrets list --detailed \
    | grep '^.\+/ \+kv \+' \
    | sed -e 's/^\/\{0,1\}\([^\/].*\/\)  *kv  *.*map\[version:\([0-9]\)\].*/--\2 \/\1/' \
    | grep -- '^--' \
    | sed -e 's/^--//'
}

matching_mount() {
  local path="$1" mount ver;
  while read -r ver mount ; do
    tail="${path#$mount}"
    [[ -n "${GENESIS_TRACE:-${GENESIS_DEBUG:-""}}" ]] && echo >&2 "DEBUG> mount: $mount; ver: $ver; tail: '$tail'"
    if [[ $tail != "$path" ]] ; then 
      echo "$mount"; echo "$tail"; echo "$ver"
      return
    fi
  done < <(safe_kv_mounts)
  bail "#R{[ERROR]} Could not find a mount point for #C{$path} in the current secrets provider"
}

setup_approle() {

  echo "  - Checking Exodus data availability..."
  if ! safe exists "$GENESIS_EXODUS_BASE" ; then
    error "#R{[ERROR]} Cannot find exodus data for #C{$GENESIS_ENVIRONMENT}.  Please redeploy" \
          "        before using addons."
  fi

  echo "  - Ensuring Vault AppRole is enabled..."
  # If AppRole is already enabled in this Vault, it'll return a 400 error with "path already in use". This is OK.
  if [[ ! $(safe vault auth enable approle 2>&1) =~ (Success\! Enabled approle auth method)|(path is already in use) ]] ; then
    echo "Failed to enable AppRole on your targeted Vault. Womp womp :("
    exit 1
  fi

  describe "  - Generating policy for #C{genesis-pipelines} app role..."
  policy="$(
    echo "# Allow the pipelines to read all items within Vault, and write to secret/exodus (for genesis exodus data)"
    echo

    { IFS= read -r sec_mnt && IFS= read -r sec_path && IFS= read -r ver; } < <(matching_mount "$GENESIS_SECRETS_MOUNT")
    if [[ -z "$sec_mnt" ]] ; then
      error "#R{[ERROR]} Cannot find mount for secrets path of '$GENESIS_SECRETS_MOUNT'"
    fi
    if [[ "$ver" == "2" && -n "$sec_path" ]] ; then
      cat <<EOF
path "${sec_mnt}data/${sec_path%/}/*" {
  capabilities = ["read", "list"]
}
path "${sec_mnt}metadata/${sec_path%/}/*" {
  capabilities = ["read", "list"]
}

EOF

    else
      cat <<EOF
path "${GENESIS_SECRETS_MOUNT%/}/*" {
  capabilities = ["read", "list"]
}

EOF
    fi

    { IFS= read -r exo_mnt && IFS= read -r exo_path && IFS= read -r ver; } < <(matching_mount "$GENESIS_EXODUS_MOUNT")
    if [[ -z "$exo_mnt" ]] ; then
      error "#R{[ERROR]} Cannot find mount for exodus path of '$GENESIS_EXODUS_MOUNT'"
    fi
    if [[ "$ver" == "2" && -n "$exo_path" ]] ; then
      cat <<EOF
path "${exo_mnt}data/${exo_path%/}/*" {
  capabilities = ["create", "read", "update", "list", "delete"]
}
path "${exo_mnt}metadata/${exo_path%/}/*" {
  capabilities = ["create", "read", "update", "list", "delete"]
}
EOF

    else
      cat <<EOF
path "${GENESIS_EXODUS_MOUNT%/}/*" {
  capabilities = ["create", "read", "update", "list", "delete"]
}
EOF

    fi
  )"
  if ! safe --quiet vault policy write genesis-pipelines - <<< "$policy" >/dev/null 2>&1 ; then
    bail "#R{[ERROR] Failed to create 'genesis-pipelines' policy."
  fi


  # Create AppRole Role named "genesis-pipelines" with the following parameters:
  # - 90 minute TTL (Some BOSH deployments could take awhile, and then the Exodus write-back could fail if TTL is too short)
  # - unlimited token use
  describe "  - Creating and configuring app role #C{genesis-pipelines}..."
  safe --quiet vault delete auth/approle/role/genesis-pipelines >/dev/null 2>&1
  if ! safe --quiet set auth/approle/role/genesis-pipelines \
    secret_id_ttl=0 \
    token_num_uses=0 \
    token_ttl=90m \
    token_max_ttl=90m \
    secret_id_num_uses=0 \
    policies=default,genesis-pipelines ; then
    bail "#R{[ERROR] Failed to create 'genesis-pipelines' approle."
  fi

  role_id=$(safe get auth/approle/role/genesis-pipelines/role-id:role_id)
  # generate a secret key for the newly minted role
  approle_secret=$(safe vault write -field=secret_id -f auth/approle/role/genesis-pipelines/secret-id)

  # write info to exodus
  describe "  - Writing access credentials to Exodus..."
  safe --quiet set "${GENESIS_EXODUS_MOUNT}ci/genesis-pipelines" approle-id="$role_id"
  safe --quiet set "${GENESIS_EXODUS_MOUNT}ci/genesis-pipelines" approle-secret="$approle_secret"

  describe "" "#G{AppRole created.}" ""
  exit 0
}

### MAIN

# Initialization of Exodus data lookup for efficiency
if ! safe exists "$GENESIS_EXODUS_BASE" ; then
  error "#R{[ERROR]} Cannot find exodus data for #C{$GENESIS_ENVIRONMENT}.  Please redeploy" \
        "        before using addons."
fi
host_env="$(safe get "$GENESIS_EXODUS_BASE:host_env" 2>/dev/null)" || host_env="$GENESIS_ENVIRONMENT"
exodus_data="$(safe get "${GENESIS_EXODUS_MOUNT}${host_env}/concourse" | spruce json)"

# Process requested addon script
case $GENESIS_ADDON_SCRIPT in
visit)
  visit
  ;;

download-fly)
  download_fly "$@"
  ;;

login)
  login
  ;;

logout)
  echo 
  if ! has_target ; then
    describe "No target set for #C{'$host_env'}"
  elif ! is_logged_in ; then 
    describe "Not logged in to target #C{'$host_env'}"
  else
    fly -t "$host_env" logout
  fi
  echo
  ;;

fly)
  is_logged_in || login
  describe >&2 \
    "" \
    "Running fly against #C{$host_env}"\
    ""
  fly -t "$host_env" "$@"
  echo
  exit $?
  ;;

setup-approle)
  setup_approle
  ;;

*)
  echo "Unrecognized Concourse Genesis Kit addon."
  list
  exit 1
  ;;
esac

exit 0
