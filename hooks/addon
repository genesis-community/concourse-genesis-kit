#!/bin/bash
# shellcheck disable=2181
set -u

#Version check
min_version="2.7.6"
genesis_version="$(genesis -v 2>&1 | grep '^Genesis v' | sed -e 's/Genesis v\(.*\) (.*$/\1/')"
if ! [[ "$genesis_version" =~ -dev$ ]] && ! new_enough "$genesis_version" "$min_version" ; then
  describe >&2 "" "#R{[ERROR]} This kit needs Genesis $min_version.  Please upgrade before continuing" ""
  exit 1
fi
set -e

list() {
  describe "" "$(cat <<END_OF_LIST
The following addons are defined for #C{$GENESIS_KIT_ID} kit:

  #G{visit}                Open the Concourse Web User Interface in your browser
                       (requires macOS)

  #G{download-fly}         Get the version of fly compatible with this Concourse

  #G{login}                Login to this Concourse deployment with fly

  #G{logout}               Logout of this Concourse deployment with fly

  #G{fly}                  Run fly commands targetting this Concourse Deployment

  #G{setup-approle}        Create the necessary Vault AppRole and policy for Genesis
                       Concourse deployments.
END_OF_LIST
  )" ""
}

if [[ "$GENESIS_ADDON_SCRIPT" == "list" ]] ; then
  list
  exit 0
fi

error() {
  bail "" "$@" ""
}

get_host_param() {
  if ! param="$(echo "$exodus_data" | jq -r '."'"${1}"'"' 2>/dev/null)" ; then
    if [[ -n "$2" ]] ; then echo "$2"; return 0; fi
    if [[ "$GENESIS_ENVIRONMENT" != "$host_env" ]] ; then
      error \
        "#R{[ERROR]} Cannot find '$1' in exodus data for host concourse environment" \
        "        '#C{$host_env}' -- please redeploy it before using this addon."
    else
      error \
        "#R{[ERROR]} Cannot find '$1' in exodus data -- please redeploy this" \
        "        environment before using this addon."
    fi
  fi
  echo "$param"
  return 0
}

visit() {
  if ! command -v open >/dev/null 2>&1; then
    error "#R{[ERROR]} The 'visit' addon script only works on macOS, currently."
  fi
  host_user="$(get_host_param username)"
  host_pw="$(get_host_param password)"
  describe "" \
    "You will need to enter the following credentials once the page opens:" \
    "#I{  username:} #C{$host_user}" \
    "#I{  password:} #C{$host_pw}" \
    ""
  host="$(get_host_param external_url)"

  read -n 1 -s -r -p "Press any key to open the web console..."
  open "${host}/teams/main/login"
}

download_fly() {
  [[ -z "$GENESIS_CALLER_DIR" ]] && error "#R{[ERROR]} Calling scope not found -- internal Genesis error"
  cd "$GENESIS_CALLER_DIR"

  path=""
  platform=""
  sync=""
  url="$(get_host_param external_url)"
  while [[ $# -gt 0 ]]; do
    arg="$1"; shift
    case "$arg" in
      "-p") platform="$1"; shift ;;
      "--sync")
        [[ -n "$path" ]]             && error "#R{[ERROR]} Can't specify a path and use --sync option"
        path="$(type -P fly 2>/dev/null)"
        sync=1
        [[ $? -gt 0 || -z "$path" ]] && error "#R{[ERROR]} No fly found in path -- cannot use --sync option"
        [[ ! -w "$path" ]]           && error "#R{[ERROR]} No write permission to $path -- cannot use --sync option"
        ;;
      "-*")                             error "#R{[ERROR]} Invalid option $arg" ;;
      *)
        [[ -n "$sync" ]]             && error "#R{[ERROR]} Can't specify a path and use --sync option"
        [[ -n "$path" ]]             && error "#R{[ERROR]} Can't specify multiple paths"
        path="$arg"
        ;;
    esac
  done

  case "${platform:-"${OSTYPE:-"$(uname -s | tr "[:upper:]" "[:lower:]")"}"}" in
    darwin*|mac)        platform='darwin' ;;
    linux*)             platform='linux' ;;
    mingw*|cygwin|win*) platform='windows' ;;
    *)
      if [[ -n "$platform" ]] ; then
        error "#R{[ERROR]} Unknown platform type '$platform': expecting one of darwin, linux or windows"
      else
        error "#R{[ERROR]} Cannot determine platform type: please specify one of darwin, linux or" \
              "        windows using the -t option"
      fi
      ;;
  esac

  [[ -z "$path" ]] && path="."
  [[ -d "$path" ]] && path="$path/fly"

      echo ""
  describe "Downloading #C{$platform/amd64} version of fly from #C{${url}}..." ""
  STATUSCODE="$(curl -o "$path" -w "%{http_code}" -Lk "$url/api/v1/cli?arch=amd64&platform=$platform")"
  [[ $? -gt 0 || $STATUSCODE != '200' ]] && error "#R{[ERROR]} Failed to download fly (Status: $STATUSCODE):" "$(cat $path)"
  chmod a+x "$path"

  describe "" "#G{Download successful - written to} #C{$path}" ""
  exit 0
}

require_fly() {
  if [[ -z "$fly" ]] ; then
    download=
    prompt_for download boolean "Command #C{fly} not found -- download it?" -i --default true
    if [[ "$download" == 'true' ]] ; then
      download_fly
      fly="./fly"
    else
      bail "Cannot continue without #C{fly} command - aborting."
    fi
  fi
  [[ -z "${notified_fly_version:-}" ]] && echo >&2 "Using fly at $(humanize_path "$fly")" && notified_fly_version=1
}

has_target() {
  require_fly
  local url target found target_url

  url="$(get_host_param external_url)" || exit $?
  target="${1:-$main_target}"
  team="${target#*/}"
  [[ "$team" == "$target" ]] && team='main'
  found="$("$fly" targets | grep "^${target} " || true)"

  [[ -z "$found" ]] && return 1

  target_url="$(echo "$found" | awk '{print $2}')"
  target_team="$(echo "$found" | awk '{print $3}')"
  [[ "$url" != "$target_url" ]] && error \
    "#R{[ERROR]} Target mismatch in URL from expected ($url) and current ($target_url)." \
    "        Cannot continue."
  [[ "$team" != "$target_team" ]] && error \
    "#R{[ERROR]} Target mismatch in team from expected ($team) and current ($target_team)." \
    "        Cannot continue."

  return 0
}

is_logged_in() {
  require_fly
  target="${1:-$main_target}"
  "$fly" -t "$target" status >/dev/null 2>&1
  return $?
}

login() {
  require_fly
  host_user="$(get_host_param username)"
  target_desc=''
  if [[ "$main_target" != "$host_env" ]] ; then
    target_desc=" (target: $main_target)"
  fi
  describe >&2 \
    "" \
    "Logging in to Concourse deployment #C{$host_env}${target_desc} as user '$host_user'." \
    ""
  host_pw="$(get_host_param password)"
  target="$main_target"
  team=''
  use_local=''
  while (( "$#" )) ; do
    case $1 in
      --local) use_local=1 ;;
      -*) bail "Invalid option $1.  Expect --local and/or team name" ;;
      *) [[ -n "$team" ]] && bail "Cannot only specify one team"; team=$1;;
    esac
    shift
  done
  if [[ -z "$team" ]] ; then
    use_local=1
  else
    target="$target/$team"
  fi

  cmd=( "$fly" -t "$target" "login" )
  [[ -z $use_local ]] || cmd+=( "--username=$host_user" "--password=$host_pw" )
  [[ -z "$team" ]] || cmd+=( "-n" "$team" )
  has_target "$target" || cmd+=( "--concourse-url" "$(get_host_param external_url)" )
  [[ "$(get_host_param self-signed no)" == "1" ]] && cmd+=( "-k" )
  "${cmd[@]}"
  rc="$?"
  [[ $rc -gt 0 ]] && describe >&2 \
    "#R{[ERROR]} Failed to log in!"
  return $rc
}

logout() {
  require_fly
  echo

  local target;
  if (( $# == 0 )) ; then
    set -- main
  fi
  # TODO: Support --all to log out of all teams for the given kit.
  while (( $# )) ; do
    target="$main_target"
    [[ "$1" == "main" ]] || target="$target/$1"
    describe "Logging out of #C{$1} team on #C{$main_target} (#M{$host_env})"
    if ! has_target "$target" ; then
      describe "#R{[E]} No target set for #C{$target}"
    elif ! is_logged_in "$target" ; then
      describe "#y{[W]} Target #C{$target} was not logged in"
    else
      "$fly" -t "$target" logout
    fi
    shift
  done
  echo
}

safe_kv_mounts() {
  safe vault secrets list --detailed \
    | grep '^.\+/ \+kv \+' \
    | sed -e 's/^\/\{0,1\}\([^\/].*\/\)  *kv  *.*map\[version:\([0-9]\)\].*/--\2 \/\1/' \
    | grep -- '^--' \
    | sed -e 's/^--//'
}

matching_mount() {
  local path="$1" mount ver;
  while read -r ver mount ; do
    tail="${path#"$mount"}"
    [[ -n "${GENESIS_TRACE:-${GENESIS_DEBUG:-""}}" ]] && echo >&2 "DEBUG> mount: $mount; ver: $ver; tail: '$tail'"
    if [[ $tail != "$path" ]] ; then
      echo "$mount"; echo "$tail"; echo "$ver"
      return
    fi
  done < <(safe_kv_mounts)
  bail "#R{[ERROR]} Could not find a mount point for #C{$path} in the current secrets provider"
}

setup_approle() {

  describe "$(cat <<'EOF'

This will setup up the app roles and policies for concourse and
genesis-pipelines.  The concourse app role will provide concourse access to a
vault location (usually `/concourse`) for interpolating secrets in pipelines.
The genesis-pipelines app role is used to allow the Genesis pipelines to access
vault for reading deployment secrets and writing exodus data.

EOF
)"

  declare -a roles
  echo -n $'\n'"Ensuring Vault AppRole is enabled..."
  # If AppRole is already enabled in this Vault, it'll return a 400 error with "path already in use". This is OK.
  result="$(safe vault auth enable approle 2>&1 || true)"
  if [[ "$result" =~ (Success\! Enabled approle auth method) ]] ; then
    describe "#G{[ok - successfully enabled approle]}"
  elif [[ "$result" =~ (path is already in use) ]] ; then
    describe "#G{[ok - approle already enabled]}"
    echo -n "Checking for existing roles..."
    if result="$( safe ls auth/approle/role -1 )" ; then
      roles=(); while IFS= read -r role; do [[ -z "$role" ]] || roles+=( "$role" ); done <<<"$result"
      describe "#G{[ok - ${#roles[@]} role(s) found]}"
    else
      bail "#R{[error]}" "Could not read existing roles..." ""
    fi
  else
    bail "#R{[error]}" "Failed to enable app role on your targeted Vault:" "$result" ""
  fi

  approle='concourse'
  create=''
  prompt_for create boolean -i --default true\
    "Do you want to install the #C{$approle} app role?"

  if [[ "$create" == 'true' ]] ; then
    # TODO: read the configuration values from env file?  Also new wizard asks
    #       for these values to put in env file...
    # The quotes around "|$approle|" are not an error - they are required
    # shellcheck disable=SC2076
    if [[ ${#roles[@]} -gt 0 && "$(IFS='|'; echo "|${roles[*]}|")" =~ "|$approle|" ]] ; then
      echo -n "$(describe "" "#y{[WARNING]} App role #C{$approle} already exists.  This action will overwrite it...")"
      continue=
      prompt_for 'continue' boolean -i "Continue?" --default false
      [[ "$continue" == true ]] || bail "Aborted"
    fi

    # Build or verify concourse mount point
    concourse_mount=
    prompt_for concourse_mount line -i --default 'concourse' \
      -V '/^[a-z0-9]*$/' \
      'Mount to use for concourse secrets '

    concourse_approle_path="${GENESIS_SECRETS_BASE%/}/approle/concourse"
    prompt_for concourse_approle_path line -i --default "$concourse_approle_path" \
      "Vault path for storing concourse app role credentials"

    mount_type="$( \
      safe vault secrets list -detailed \
      | grep "^${concourse_mount}/" \
      | sed -e 's/map\[version:\([12]\)\]/v\1/' \
      | awk '{print $2 "_" $10}')"

    concourse_mount="/${concourse_mount#/}"
    if [[ -z "$mount_type" ]] ; then
      kv_version=''
      prompt_for kv_version 'select' '' --default 2 \
        "Mount ${concourse_mount} does not exist.  It must be a v1 or v2 kv store." \
        -o '[1] Create a kv v1 secrets store' \
        -o '[2] Create a kv v2 secrets store'

      echo -n "$(describe "Creating mount #C{${concourse_mount} (kv v$kv_version)...")"
      if [[ -n "$kv_version" ]] ; then
        desc="endpoint used for interpolating concourse pipeline secrets"
        if ! safe vault secrets enable kv -path "${concourse_mount}" -version "${kv_version}" -description "${desc}" ; then
          bail "#R{[error]}" "Failed to create mount ${concourse_mount} -- please resolve and try again" ""
        fi
      fi
      describe "#G[ok]"
      mount_type="kv_v{$kv_version}"
    else
      echo -n "$(describe "Found existing mount #C{${concourse_mount}} - validating...")"
      if [[ "$mount_type" =~ ^kv_v[12]$ ]] ; then
        describe "#G{[ok - ${mount_type}]}"
      else
        bail "#R{[error - invalid type]}" "Found a ${mount_type} at mount ${concourse_mount} -- Cannot use this as a concourse secrets store (must be kv v1 or v2)" ""
      fi
    fi

    # Build concourse policy
    echo -n "$(describe "Creating #C{concourse} policy...")"
    policy="$(
      echo "# List, create, update, and delete key/value secrets for Concourse"
      capabilities=$'" {\n  capabilities = ["create", "read", "update", "delete", "list", "sudo"]\n}'
      if [[ "$mount_type" == "kv_v1" ]] ; then
        echo 'path "'"${concourse_mount%/}/*$capabilities"
      else
        echo 'path "'"${concourse_mount%/}/data/*$capabilities"
        echo 'path "'"${concourse_mount%/}/metadata/*$capabilities"
      fi
    # Allow crud under secret
      echo 'path "'"secret/*$capabilities"
    )"
    if ! safe --quiet vault policy write concourse - <<< "$policy" >/dev/null 2>&1 ; then
      bail "#R{[error]}" "Failed to save #C{concourse} policy."
    fi
    describe "#G{[ok]}"
    describe "#wui{Policy for $approle}" "#K{$policy}" ""

    # Create app role
    echo -n "$(describe "Creating and configuring app role #C{$approle}...")"
    safe --quiet vault delete "auth/approle/role/$approle" >/dev/null 2>&1
    if ! safe --quiet set auth/approle/role/$approle \
      secret_id_ttl=0 \
      token_num_uses=0 \
      token_period=3600 \
      token_ttl=3600 \
      token_max_ttl=0 \
      secret_id_num_uses=0 \
      policies=concourse ; then
      bail "#R{[error]}" "Failed to create #C{$approle} approle."
    fi
    describe "#G{[ok]}"

    echo -n "Generating and storing authentication credentials..."
    role_id=$(safe get auth/approle/role/$approle/role-id:role_id)
    # generate a secret key for the newly minted role
    approle_secret=$(safe vault write -field=secret_id -f auth/approle/role/$approle/secret-id)

    # write info to vault
    safe --quiet set "${concourse_approle_path}" approle-id="$role_id"
    safe --quiet set "${concourse_approle_path}" approle-secret="$approle_secret"
    describe "#G{[ok]}" "Access credentials written to #M{$concourse_approle_path}"

    describe "" "#G{[DONE]} App role #C{$approle} created."
  fi # Create oncourse mount

  approle="genesis-pipelines"
  prompt_for create boolean -i --default true\
    "Do you want to install the #C{$approle} app role?"

  if [[ "$create" == 'true' ]] ; then
    # TODO: read the configuration values from env file?  Also new wizard asks
    #       for these values to put in env file...
    # The quotes around "|$approle|" are not an error - they are required
    # shellcheck disable=SC2076
    if [[ ${#roles[@]} -gt 0 && "$(IFS='|'; echo "|${roles[*]}|")" =~ "|$approle|" ]] ; then
      echo -n "$(describe "" "#y{[WARNING]} App role #C{$approle} already exists.  This action will overwrite it...")"
      prompt_for 'continue' boolean -i "Continue?" --default false
      [[ $continue == true ]] || bail "Aborted"
    fi

    echo -n "Checking Exodus data availability..."
    if ! safe exists "$GENESIS_EXODUS_BASE" ; then
      bail "#R{[error]}" "Cannot find exodus data for #C{$GENESIS_ENVIRONMENT}.  Please redeploy " \
           "before using addons."
    fi
    describe "#G{[ok]}"

    echo -n "$(describe "Generating policy for #C{$approle} app role...")"
    policy="$(
      echo "# Allow the pipelines to read all items within Vault, and write to secret/exodus (for genesis exodus data)"
      echo

      { IFS= read -r sec_mnt && IFS= read -r sec_path && IFS= read -r ver; } < <(matching_mount "$GENESIS_SECRETS_MOUNT")
      if [[ -z "$sec_mnt" ]] ; then
        bail "#R{[error]}" "Cannot find mount for secrets path of '$GENESIS_SECRETS_MOUNT'"
      fi
      capabilities=$'" {\n  capabilities = ["read", "list"]\n}'
      if [[ "$ver" == "2" && -n "$sec_path" ]] ; then
        echo 'path "'"${sec_mnt}data/${sec_path%/}/*$capabilities"
        echo 'path "'"${sec_mnt}metadata/${sec_path%/}/*$capabilities"
      else
        echo 'path "'"${GENESIS_SECRETS_MOUNT%/}/*$capabilities"
      fi

      { IFS= read -r exo_mnt && IFS= read -r exo_path && IFS= read -r ver; } < <(matching_mount "$GENESIS_EXODUS_MOUNT")
      if [[ -z "$exo_mnt" ]] ; then
        bail "#R{[error]}" "Cannot find mount for exodus path of '$GENESIS_EXODUS_MOUNT'"
      fi
      capabilities=$'" {\n  capabilities = ["create", "read", "update", "list", "delete"]\n}'
      if [[ "$ver" == "2" && -n "$exo_path" ]] ; then
        echo 'path "'"${exo_mnt}data/${exo_path%/}/*$capabilities"
        echo 'path "'"${exo_mnt}metadata/${exo_path%/}/*$capabilities"
      else
        echo 'path "'"${GENESIS_EXODUS_MOUNT%/}/*$capabilities"
      fi
    )"

    if ! safe --quiet vault policy write "$approle" - <<< "$policy" >/dev/null 2>&1 ; then
      bail "#R{[error]}" "Failed to create #C{$approle} policy."
    fi
    describe "#G{[ok]}"
    describe "#wui{Policy for $approle}" "#K{$policy}" ""


    # Create AppRole Role named "genesis-pipelines" with the following parameters:
    # - 90 minute TTL (Some BOSH deployments could take awhile, and then the Exodus write-back could fail if TTL is too short)
    # - unlimited token use
    echo -n "$(describe "Creating and configuring app role #C{$approle}...")"
    safe --quiet vault delete "auth/approle/role/$approle" >/dev/null 2>&1
    if ! safe --quiet set "auth/approle/role/$approle" \
      secret_id_ttl=0 \
      token_num_uses=0 \
      token_ttl=60m \
      token_max_ttl=60m \
      secret_id_num_uses=0 \
      policies="default,$approle" ; then
      bail "#R{[error]}" "Failed to create #C{$approle} approle."
    fi
    describe "#G{[ok]}"

    echo -n "Writing access credentials to Exodus..."
    role_id=$(safe get auth/approle/role/$approle/role-id:role_id)
    # generate a secret key for the newly minted role
    approle_secret=$(safe vault write -field=secret_id -f auth/approle/role/$approle/secret-id)

    # write info to exodus
    safe --quiet set "${GENESIS_EXODUS_MOUNT}ci/$approle" approle-id="$role_id"
    safe --quiet set "${GENESIS_EXODUS_MOUNT}ci/$approle" approle-secret="$approle_secret"
    describe "#G{[ok]}" "Access credentials written to #M{${GENESIS_EXODUS_MOUNT}ci/$approle}"

    describe "" "#G{[DONE]} App role #C{$approle} created." ""
  fi
  exit 0
}

### MAIN

# Initialization of Exodus data lookup for efficiency
if ! safe exists "$GENESIS_EXODUS_BASE" ; then
  error "#R{[ERROR]} Cannot find exodus data for #C{$GENESIS_ENVIRONMENT}.  Please redeploy" \
        "        before using addons."
fi
host_env="$(safe get "$GENESIS_EXODUS_BASE:host_env" 2>/dev/null)" || host_env="$GENESIS_ENVIRONMENT"
exodus_data="$(safe get "${GENESIS_EXODUS_MOUNT}${host_env}/concourse" | spruce json)"
main_target="$(jq -r --arg default "$GENESIS_ENVIRONMENT" '.main_target//$default' <<<"$exodus_data")"

fly=
if [[ -n "${GENESIS_FLY_CMD:-}" ]] ; then
  fly="$GENESIS_FLY_CMD"
elif [[ -x ${GENESIS_ROOT}/fly ]] ; then
  fly="${GENESIS_ROOT}/fly"
else
  fly="$(type -P fly)"
fi

describe >&2 "Using addon script from #C{$GENESIS_KIT_NAME} kit #M{v$GENESIS_KIT_VERSION}"

# Process requested addon script
case $GENESIS_ADDON_SCRIPT in
visit)
  visit
  ;;

download-fly)
  download_fly "$@"
  ;;

login)
  login "$@"
  ;;

logout)
  logout "$@"
  ;;

fly)
  is_logged_in || login
  describe >&2 \
    "" \
    "Running fly against #C{$host_env}"\
    ""
  "$fly" -t "$main_target" "$@"
  echo
  exit $?
  ;;

setup-approle)
  setup_approle
  ;;

*)
  echo "Unrecognized Concourse Genesis Kit addon."
  list
  exit 1
  ;;
esac

exit 0
