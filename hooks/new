#!/bin/bash
set -u

#Version check
min_version="2.7.6"
genesis_version="$(genesis -v 2>&1 | grep '^Genesis v' | sed -e 's/Genesis v\(.*\) (.*$/\1/')"
if ! [[ "$genesis_version" =~ -dev$ ]] && ! new_enough "$genesis_version" "$min_version" ; then
  describe >&2 "" "#R{[ERROR]} This kit needs Genesis $min_version.  Please upgrade before continuing" ""
  exit 1
fi
set -e

dir="$GENESIS_ROOT"
name="$GENESIS_ENVIRONMENT"

ymlfile="$dir/$name.yml"
declare -a features
features=()
params=""

describe "" \
  "#G{Concourse CI/CD Genesis Kit}" \
  "#G{---------------------------}" \
  "" \
  "Creating environment #C{$name} in #C{$dir}"

kit_type= # Assigned below
prompt_for kit_type "select" \
  "Is this a full Concourse deployment, or a worker deployment for an existing Concourse?" \
  -o "[full]     Full Concourse" \
  -o "[small-footprint]     Small Footprint Concourse" \
  -o "[workers]  Satellite Concourse"

features+=( "$kit_type" )

if [[ "$kit_type" == "full" || "$kit_type" == "small-footprint" ]] ; then

  auth_backend_feature=
  prompt_for auth_backend_feature "select" \
    "What authentication backend do you wish to use with Concourse?" \
    -o "[github-oauth]            GitHub OAuth Integration" \
    -o "[github-enterprise-oauth] GitHub Enterprise OAuth Integration" \
    -o "[cf-oauth]                UAA OAuth Integration" \
    -o "[]                        HTTP Basic Auth"
  if [[ -n "$auth_backend_feature" ]] ; then
    features+=("$auth_backend_feature")
  fi

  case "$auth_backend_feature" in
    "github-oauth")
      describe "" \
        'The GitHub OAuth Client ID and Client Secret are needed to authenticate Concourse' \
        'to GitHub, so that Concourse can then authorize users after they log into GitHub.' \
        'See https://developer.github.com/v3/oauth/ for more info.'

      client_id=
      client_secret=
      prompt_for client_id line "GitHub OAuth Client ID" -i
      prompt_for client_secret line "GitHub OAuth Client Secret" -i
      safe set --quiet "${GENESIS_SECRETS_BASE}oauth" provider_key="$client_id" provider_secret="$client_secret"

      describe "" \
        "Concourse authorizes access based off of GitHub Organizations"
      prompt_for authz_allowed_orgs line \
        "Which GitHub organization do you want to grant access to Concourse?"
      param_entry params authz_allowed_orgs
      ;;

    "github-enterprise-oauth")
      describe "" \
        'The GitHub OAuth Client ID and Client Secret are needed to authenticate Concourse' \
        'to GitHub, so that Concourse can then authorize users after they log into GitHub.' \
        'See https://developer.github.com/v3/oauth/ for more info.'

      prompt_for client_id line "GitHub OAuth Client ID" -i
      prompt_for client_secret line "GitHub OAuth Client Secret" -i
      safe set --quiet "${GENESIS_SECRETS_BASE}oauth" provider_key="$client_id" provider_secret="$client_secret"

      prompt_for authz_allowed_orgs line \
        "Which GitHub organization do you want to grant access to Concourse?"
      param_entry params authz_allowed_orgs

      describe "" \
        "What is the GitHub Enterprise hostname? example: github.example.com"
      prompt_for github_host line "GitHub Enterprise Hostname:" -i
      param_entry params github_host
      ;;

    "cf-oauth" )
      describe "" \
        "The UAA client id and secret is needed to authenticate Concourse to the UAA," \
        "so that Concourse can then authorize users after they log into the UAA."
      prompt_for client_id line "UAA Client ID:" -i
      prompt_for client_secret line "UAA Client Secret:" -i
      safe set --quiet "${GENESIS_SECRETS_BASE}oauth" provider_key="$client_id" provider_secret="$client_secret"

      describe "" \
        "What is the URL of the CF installation that will be used for UAA-based" \
        "authentication.  Should be the same URL that is used to log in to the CF" \
        "installation."
      prompt_for cf_base_url line \
        "Cloud Foundry Base URL:" -i \
        -V url
      cf_scheme=${cf_base_url%%://*}
      if [[ "$cf_scheme" == "$cf_base_url" ]] ; then
        cf_scheme="https"
      else 
        cf_base_url="${cf_base_url#*://}"
      fi
      prompt_for cf_api_url line \
        "Cloud Foundry API URL:" -i \
        --default "${cf_scheme}://api.system.${cf_base_url}" \
        -V url
      param_entry params cf_api_url

      describe "" \
        "The Cloud Foundry CA cert is used to authenticate Concourse to the UAA," \
        "so that Concourse can then authorize users after they log into the UAA." \
        "This is usually something like '#C{secret/path/to/keys/for/haproxy/ssl:certificate}'" \
        "If you are unsure, use '#G{safe tree}' to find it. If you are terminating ssl on LBs or" \
        "Go routers, you will need cert on those nodes."
      prompt_for cf_ca_cert_vault_path line \
        "What is your CF CA cert path?" \
        -V vault_path_and_key
      param_entry params cf_ca_cert_vault_path

      cf_spaces=() # Assigned below
      prompt_for cf_spaces multi-line \
        "What CF spaces do you want to grant access to Concourse?"
      param_entry params cf_spaces -a "${cf_spaces[@]}"
      ;;
  esac

  use_vault=
  prompt_for use_vault "select" \
    "Vault integration for secret storage:" \
    -o "[vault]         Use static token" \
    -o "[vault-approle] Use approle (generate via genesis <env> do setup-approle)" \
    -o "[]              No secret storage integration"

  if [[ -n "$use_vault" ]] ; then
    [[ $use_vault == "vault-approle" ]] && features+=("vault")
    features+=("$use_vault")

    prompt_for vault_url line -i \
      "Vault URL:" \
      --default "$GENESIS_TARGET_VAULT" \
      -V url
    param_entry params vault_url

    vault_insecure_skip_verify=
    prompt_for vault_insecure_skip_verify boolean "Allow insecure connection?" --default yes --inline
    $vault_insecure_skip_verify && param_entry params vault_insecure_skip_verify

    vault_path_prefix=
    prompt_for vault_path_prefix line -i \
      "Vault Path Prefix:" \
      --default '/concourse'
    [[ $vault_path_prefix == '/concourse' ]] || param_entry params vault_path_prefix

    case "$use_vault" in
      (vault)
        prompt_for vault:token secret-line "Vault Token"
        ;;
      (vault-approle)
        describe '' \
          "You must run #C{$GENESIS_CALL_ENV do -- setup-approle} before deploying to build the" \
          "concourse approle."
        ;;
    esac
  fi

  use_external_db=
  prompt_for use_external_db boolean "Do you want to use an external database?" --default no --inline
  if ${use_external_db} ; then
      features+=("external-db")
      prompt_for external_db_host line "Enter the host of the database using IP or FQDN."
      param_entry params external_db_host
      external_db_port=
      prompt_for external_db_port line "The port that the database is listening on." \
        --default 5432 \
        --validation port
      [[ "$external_db_port" == "5432" ]] || param_entry params external_db_port
      external_db_name=
      prompt_for external_db_name line "The name of the database to connect to." --default atc
      [[ "$external_db_name" == "atc" ]] || param_entry params external_db_name
      external_db_user=
      prompt_for external_db_user line "The username used to connect to the database." --default atc
      [[ "$external_db_user" == "atc" ]] || param_entry params external_db_user
      prompt_for "database/external:password" secret-line \
        "The password for the '${external_db_user}' database user."
      external_db_sslmode=
      prompt_for external_db_sslmode "select" \
        "The sslmode parameter to connect to the database with." \
        --default verify-ca \
        --option "[disable] disable - No security, and no overhead for encryption." \
        --option "[allow] allow - Only use SSL if the server insists on it." \
        --option "[prefer] prefer - Use SSL if the server supports it." \
        --option "[require] require - Use SSL but do not verify the certificate." \
        --option "[verify-ca] verfiy-ca - Use SSL and verify the CA certificate." \
        --option "[verify-full] verify-full - Use SLL and verify the certificate chain."
      [[ "$external_db_sslmode" == "verify-ca" ]] || param_entry params external_db_sslmode
      if [[ "${external_db_sslmode}" == verify-* ]]; then
          use_external_db_ca=
          prompt_for use_external_db_ca boolean "Do you want to provide your own ca certificate for ${external_db_sslmode} mode?" --default no --inline
          if ${use_external_db_ca} ; then
            features+=("external-db-ca")
            prompt_for external_db_ca block "The sslmode ca certificate required for sslmode ${external_db_sslmode}."
            param_entry params external_db_ca
            echo # makes output look better
          fi
      fi
  fi

  describe "" \
    "Concourse should be protected by TLS, since build logs may contain" \
    "sensitive information (like IPs, usernames, etc.)."
  ssl_cert_feature= # Assigned below
  prompt_for ssl_cert_feature "select" \
    "How would you like to configure Concourse TLS?" \
    -o "[provided-cert]    I have my own certificate for Concourse" \
    -o "[self-signed-cert] Please have Genesis create a self-signed certificate for Concourse" \
    -o "[no-tls]           Do not; an upstream proxy / load balancer is handling TLS"
  features+=("$ssl_cert_feature")

  case "$ssl_cert_feature" in
    "provided-cert")
      prompt_for "ssl/server:certificate" secret-block \
        "What is the SSL certificate for Concourse?"

      prompt_for "ssl/server:key" secret-block \
        "What is the SSL key for Concourse?"
      ;;
  esac

  describe "" \
    "The external domain for concourse is the DNS entry users will use to access" \
    "Concourse.  You can specify the IP address if you don't have a DNS entry.  Do" \
    "not include 'https://' in this value."
  prompt_for external_domain line "External Domain or IP:" -i
  param_entry params external_domain

  describe "" \
    "The main target is the name that will be used by fly to connect to the main" \
    "team. This defaults to the name of the environment, but can be given a short-" \
    "hand name for convenience.  Team-based targets will be the name of the team," \
    "followed by @<main-target->"
  main_target=
  prompt_for main_target line "Master target name" -i --default "$name"
  [[ "$main_target" == "$name" ]] ||  param_entry params main_target

else
  describe "" \
    "A worker-only Concourse deployment requires an existing full host Concourse" \
    "deployment for the workers to connect to."
  tsa_host_env= # Assigned below
  prompt_for tsa_host_env line \
    "Please specify environment name of the Concourse host deployment"
  param_entry params tsa_host_env

  if ! safe exists "${GENESIS_EXODUS_MOUNT}$tsa_host_env/concourse" ; then
    describe >&2 "" \
      "#R{[ERROR]} No deployment details found for $tsa_host_env Concourse deployment." \
      "Please ensure that it has been deployed first using Genesis v2.6 or greater and this" \
      "version of the Concourse Genesis Kit" \
      ""
    exit 2
  fi
fi


# Build environment file:
cat >"$ymlfile" -- <<EOF
---
kit:
  name:    $GENESIS_KIT_NAME
  version: $GENESIS_KIT_VERSION
  features:
    - (( replace ))
EOF
for f in "${features[@]}" ; do
  printf >>"$ymlfile" -- '    - %s\n' "$f"
done

genesis_config_block >>"$ymlfile"

# Params
if [[ -n "$params" ]] ; then
  # shellcheck disable=2059 disable=2028
  printf >>"$ymlfile" -- "$( echo "\nparams:\n$params" | sed -e 's/%/%%/g')"
fi

describe "" "Wrote configuration to #C{$ymlfile}." ""

offer_environment_editor

exit 0
