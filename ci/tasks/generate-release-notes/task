#!/usr/bin/env bash

set -e
set -o pipefail
# set -x

custom_notes=$(pwd)/git-ci/ci/release_notes.md
notes=$(pwd)/release-notes/notes.md

touch ${custom_notes}
cp ${custom_notes} ${notes}

get_releases() {
    spruce merge --go-patch manifests/releases/*.yml | spruce json |jq '.releases | sort_by(.name) | unique_by(.name) | .[]'
}

release_paths=$(curl -s https://bosh.io/releases/ | grep '<a href="/releases/' | cut -d'"' -f2 | cut -d'?' -f1)
get_release_url() {
    # sort results to prefere cloudfoundry over cloudfoundry-{incubator,community}
    local release_path=$(echo -e "${release_paths}" | grep -E "/${1}$|/${1}-release$|/${1}-boshrelease$|/${1}-bosh-release$" | sort -n | tail -n 1)

    if [ ! -z "${release_path}" ]; then
        echo "https://bosh.io${release_path}?version=${2}"
    fi
}

pushd git-latest-tag > /dev/null
stable_releases=$(get_releases)
popd > /dev/null

echo $stable_releases | jq '.name'

pushd git > /dev/null
new_releases=$(get_releases)
popd > /dev/null

notes_releases=""
for release in $(echo ${new_releases} | jq -c '.'); do
    name=$(echo ${release} | jq -r '.name')
    version=$(echo ${release} | jq -r '.version')
    stable_version=$(echo ${stable_releases} | jq -s -r --arg name "${name}" '.[] | select(.name == $name).version')

    release_url=$(get_release_url ${name} ${version})
    if [ ! -z "${release_url}" ]; then
        notes_releases+="| ${name} | [${version}](${release_url}) |"
    else
        notes_releases+="| ${name} | ${version} |"
    fi

    if [[ "${version}" != "${stable_version}" ]]; then
        notes_releases+=" yes |\n"
    else
        notes_releases+=" no |\n"
    fi
done

if [ ! -z "${notes_releases}" ]; then
    echo "## Release updates:" >> ${notes}
    echo "| Name | Version | Changed |" >> ${notes}
    echo "| ---- | ------- | ------- |" >> ${notes}
    echo -e "${notes_releases}" >> ${notes}
fi

cat ${notes}